import os
import docker
import shutil
import json

# Docker configuration
python2_tag = 'python2:parse'
python3_tag = 'python3:parse'

local_dir = os.path.abspath('mount')
if not os.path.isdir(local_dir):
    os.mkdir(local_dir)

remote_dir = '/volumes/'
mount = docker.types.Mount(target=remote_dir, source=local_dir, type='bind', read_only=False)

local_file = os.path.join(local_dir, 'snippet.py')
remote_file = os.path.join(remote_dir, 'snippet.py')
client = docker.from_env()

def parse_pyfile(pyfile):
    parse_results = {'Python2': None, 'Python3': None}
    shutil.copyfile(pyfile, local_file)
    
    # Python 2
    container = client.containers.run(image=python2_tag, detach=True, mounts=[mount], command=[remote_file])
    container.wait(condition='not-running')['StatusCode']
    run_logs = container.logs(stdout=True, stderr=True).decode().strip()
    container.remove()
    try:
        parse_results['Python2'] = json.loads(run_logs)
        print('Parsing result in Python 2.7.18:\n{}'.format(parse_results['Python2']))
    except json.JSONDecodeError:
        print(run_logs)
    
    # Python3
    container = client.containers.run(image=python3_tag, detach=True, mounts=[mount], command=[remote_file])
    container.wait(condition='not-running')['StatusCode']
    run_logs = container.logs(stdout=True, stderr=True).decode().strip()
    container.remove()
    try:
        parse_results['Python3'] = json.loads(run_logs)
        print('Parsing result in Python 3.8.11:\n{}'.format(parse_results['Python3']))
    except json.JSONDecodeError:
        print(run_logs)
    
    os.remove(local_file)

    return parse_results

def select_version(snippet, parse_results):
    python_version = []
    compatible = []
    if parse_results['Python3'] is not None:
        if parse_results['Python2'] is not None:
            py2_third_modules = len(parse_results['Python2']['imports'])
            py3_third_modules = len(parse_results['Python3']['imports'])
            alternative_py.write(snippet + "\n")
            compatible.append("Python2")
            compatible.append("Python3")
            if py2_third_modules < py3_third_modules:
                python_version.append('Python2')
            elif py2_third_modules == py3_third_modules:
                python_version.append('Python2')
                python_version.append('Python3')
            else:
                python_version.append('Python3')
        else:
            python_version.append('Python3')
            py3.write(snippet + "\n")
            compatible.append("Python3")
    elif parse_results['Python2'] is not None:
        python_version.append('Python2')
        py2.write(snippet + "\n")
        compatible.append("Python2")
    
    if len(python_version) == 0:
        print('{} can not be parsed.'.format(snippet))
        no_version.write(snippet + "\n")
    
    print('Optional Python version: {}'.format(python_version))
    return python_version, compatible


py_snippets = open("py_snippets.txt", "r")
file_version = open("version.txt", "w")
py3 = open("py3.txt", "w")
py2 = open("py2.txt", "w")
alternative_py = open("alternative_py.txt", "w")
no_version = open("no_version.txt", "w")
for riga in py_snippets:
    snippet = riga.strip()
    file_version.write(snippet+": \n")
    parse_results = parse_pyfile(snippet)
    print(parse_results)
    selected_version, compatible = select_version(snippet, parse_results)
    file_version.write("Compatible versions: "+str(compatible) + "\n")
    file_version.write("Selected version: "+str(parse_results) + "\n\n")

print("Done. Check txt files for results")
file_version.close()
py3.close()
py2.close()
alternative_py.close()
no_version.close()
shutil.rmtree(local_dir)
client.close()


