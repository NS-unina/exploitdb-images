import os
import docker
import shutil
import json
import pandas as pd
import time

f = open('check_version_time.txt', 'w')
start_time = time.time()

# Docker configuration
python2_tag = 'python2:parse'
python3_tag = 'python3:parse'

local_dir = os.path.abspath('mount')
if not os.path.isdir(local_dir):
    os.mkdir(local_dir)

remote_dir = '/volumes/'
mount = docker.types.Mount(target=remote_dir, source=local_dir, type='bind', read_only=False)

local_file = os.path.join(local_dir, 'snippet.py')
remote_file = os.path.join(remote_dir, 'snippet.py')
client = docker.from_env()

def parse_pyfile(pyfile):
    parse_results = {'Python2': None, 'Python3': None}
    shutil.copyfile(pyfile, local_file)
    
    # Python 2
    container = client.containers.run(image=python2_tag, detach=True, mounts=[mount], command=[remote_file])
    container.wait(condition='not-running')['StatusCode']
    run_logs = container.logs(stdout=True, stderr=True).decode().strip()
    container.remove()
    try:
        parse_results['Python2'] = json.loads(run_logs)
        print('Parsing result in Python 2.7.18:\n{}'.format(parse_results['Python2']))
    except json.JSONDecodeError:
        print(run_logs)
    
    # Python3
    container = client.containers.run(image=python3_tag, detach=True, mounts=[mount], command=[remote_file])
    container.wait(condition='not-running')['StatusCode']
    run_logs = container.logs(stdout=True, stderr=True).decode().strip()
    container.remove()
    try:
        parse_results['Python3'] = json.loads(run_logs)
        print('Parsing result in Python 3.8.11:\n{}'.format(parse_results['Python3']))
    except json.JSONDecodeError:
        print(run_logs)
    
    os.remove(local_file)

    return parse_results


def select_version(parse_results):
    version = "no"
    if parse_results['Python3'] is not None:
        if parse_results['Python2'] is not None:
            py2_third_modules = len(parse_results['Python2']['imports'])
            py3_third_modules = len(parse_results['Python3']['imports'])
            if py2_third_modules < py3_third_modules:
                version = "2"
            elif py2_third_modules == py3_third_modules:
                version = "alternative"
            else:
                version = "3"
        else:
            version = "3"
    elif parse_results['Python2'] is not None:
        version = "2"

    return version

#Get the version selected for the snippet: 2, 3, alternative or no one
def get_version(snippetfile):
    snippetpath = os.path.join('..', 'exploit_db_repo', snippetfile)
    parse_results = parse_pyfile(snippetpath)
    selected_version = select_version(parse_results)
    return selected_version


df = pd.read_csv('python_exploits.csv')
df['version'] = df['file'].apply(get_version)

df.to_csv('python_exploits.csv', index=False)

#Statistics on version frequency and percentage
plot = df.plot.pie(y='version', title="Python version selected", autopct='%1.1f%%', legend=False, startangle=0)
plot.show()

print("Done. Check python_exploits.csv file")


shutil.rmtree(local_dir)
client.close()

f.write('Execution time: '+str(time.time()-start_time))
f.close


