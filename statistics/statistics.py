import csv
import matplotlib.pyplot as plt
import numpy as np
from collections import Counter
import subprocess

languages = []
languages_wordpress = []
languages_txt = []

# Check language of exploits with txt extension
def get_language(exploit):
    cmd = "file ../"+ exploit
    result = str(subprocess.check_output(cmd, shell=True))
    file_res.write(str(result))
    return result

def autopct(pct): # only show the label when it's > 10%
    return ('%1.1f%%' % pct) if pct > 1 else ''
    
with open('files_exploits.csv', encoding='utf-8', newline='') as f:
    lettore = csv.reader(f, delimiter=',')
    file_res = open("statistics.txt", "w")

    for riga in lettore:
        ext = riga[1].split(".")

        if len(ext)>1:                                             # first csv line omitted
            if(ext[1]=="txt"):                                     # txt extension -> check language (local exploit db)
                result = get_language(riga[1])
                result = result.split(": ")[1].split()[0].lower()  # uniform results 
                
                if(result.lower() == "python"):
                    result = "py"
                elif(result.lower() == "c++"):
                    result = "cpp"
                elif(result.lower() == "ruby"):
                    result = "rb"
                elif(result.lower() == "exported"):
                    result = "sgml"
                elif(result.lower() == "unified"):
                    result = "diff"
                elif(result.lower() == "perl5"):
                    result = "perl"

            else:
                result = ext[1]

            print(result)
            
            file_res.write(result + "\n")
            languages.append(result)

            if("wordpress" in riga[2].lower()):                   #WordPress statistics                
                languages_wordpress.append(result)

print("done")
file_res.write("/n")

#Global statistics
lang = Counter(languages)
print(lang)
file_res.write(str(lang))
file_res.write("/n")

#Global percentage
percentage = [(i, lang[i] / len(languages) * 100.0) for i in lang]
print(percentage)
file_res.write(str(percentage))
file_res.write("/n")

#Global plot
labels = []
sizes = []

for x, y in lang.items():
    labels.append(x)
    sizes.append(y)

plt.pie(sizes, labels=labels, autopct=autopct, shadow=True, startangle=90)
plt.title("Global statistics")
plt.axis('equal')
plt.savefig('global_statistics.png')
plt.show()

#WordPress statistics
wp_lang = Counter(languages_wordpress)
print(wp_lang)
file_res.write(str(wp_lang))
file_res.write("/n")

#WordPress percentage
percentage_wp = [(i, wp_lang[i] / len(languages_wordpress) * 100.0) for i in wp_lang]
print(percentage_wp)
file_res.write(str(percentage_wp))
file_res.write("/n")

#WordPress plot
labels = []
sizes = []

for x, y in wp_lang.items():
    labels.append(x)
    sizes.append(y)

plt.pie(sizes, labels=labels, autopct=autopct, shadow=True, startangle=90)
plt.title("WordPress statistics")
plt.axis('equal')
plt.savefig('wp_statistics.png')
plt.show()
file_res.close()