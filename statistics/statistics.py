
import os
from git.repo.base import Repo
import sys
sys.path.append('..')
from core.languages import lang
import pandas as pd
import matplotlib.pyplot as plt
import time

f = open('execution_time.txt', 'w')
first_time = time.time()

def autopct(pct): # only show the label when it's > 10%
    return ('%1.1f%%' % pct) if pct > 1 else ''

#Download exploit-db snippets as local files 
def download_repo():
    start_time = time.time()
    path = os.path.join('..','exploit_db_repo')
    if not(os.path.isdir(path)):
        print('Downloading exploit_db repository from github...')
        Repo.clone_from("https://gitlab.com/exploit-database/exploitdb.git", path)
    else:
        print("Exploits already downloaded. For updates: delete exploit_db_repo folder and retry")
    f.write('Download repo time: ' + str(time.time()-start_time) + ' seconds\n')
    return

def get_path(file):
    return os.path.join("..", "exploit_db_repo", file)

#Read and edit csv with language column
def edit_csv():
    if not os.path.isfile('files_exploit_lang.csv'):
        print('Editing csv...')
        path = os.path.join('..','exploit_db_repo','files_exploits.csv')
        df = pd.read_csv(path)
        #Add new column for snippet extension
        df['ext'] = df['file'].str.split('.', n=1, expand=True)[1]

        #Add new column for snippet language
        df['language'] = df['file'].apply(get_path).apply(lang.get_language)

        #Save edited dataset on new csv
        df.to_csv('files_exploit_lang.csv', index=False)
        print('Created file: files_exploit_lang.csv')
    else:
        print('Edited csv file with language already present. For update delete files_exploit_lang.csv and run statistics again')
    
    df_lang = pd.read_csv('files_exploit_lang.csv')
    return df_lang


def global_statistics():
    #---------------GLOBAL STATISTICS----------------
    #Global percentage dataset
    if not os.path.isfile(os.path.join('results','global_statistics.csv')):
        print('Executing global statistics...')
        percentage = (df_lang['language'].value_counts()/df_lang['language'].count())*100
        print('Global percentage of snippets languages available in results/global_statistics.csv')
        percentage.to_csv(os.path.join('results','global_statistics.csv'))
    else:
        print('Global percentage already generated in results/global_statistics.csv. For updates: delete it and retry')
    return 

def wordpress_statistics():
    df_wp = df_lang[df_lang['description'].str.contains('wordpress', case=False)]
    #---------------WORDPRESS STATISTICS----------------
    #Wordpress snippets dataset
    if not os.path.isfile(os.path.join('results','wp_statistics.csv')):
        #Wp percentage Dataset
        print('Executing wordpress statistics...')
        percentage_wp = (df_wp['language'].value_counts()/df_wp['language'].count())*100
        print('Percentage of wp snippets languages available in results/wp_statistics.csv')
        percentage_wp.to_csv(os.path.join('results','wp_statistics.csv'))
    else:
        print('Wordpress percentage already generated in results/wp_statistics.csv. For updates: delete it and retry')
    return df_wp

def plot_percentage(df_lang, df_wp):
    #---------------PLOT PERCENTAGE----------------
    if not os.path.isfile(os.path.join('results','percentage.png')):
        print('Plotting percentages...')
        fig = plt.figure(figsize=(8,4),dpi=160)
        plt.rcParams['font.size'] = 7.0
        ax1 = fig.add_subplot(121)
        df_lang_count = df_lang.language.value_counts()
        ax1.pie(df_lang_count, labels=df_lang_count.index, autopct=autopct)
        df_wp_count = df_wp.language.value_counts()
        ax2 = fig.add_subplot(122)
        ax2.pie(df_wp_count, labels=df_wp_count.index, autopct=autopct)
        fig.savefig(os.path.join('results','percentage.png'))
    else:
        print('Plot percentage already generated in results/percentage.png. For updates: delete it and retry')

def python_statistics():
    #---------------PYTHON DATASET STATISTICS----------------
    if not os.path.isfile(os.path.join(os.path.join('results','python_exploits.csv'))):
        print('Executing python statistics...')
        #Python snippets dataset
        df_py = df_lang[df_lang['language']=='py']
        #Save python dataset on new csv
        df_py.to_csv('python_exploits.csv', index=False)
    else:
        print('Python snippet csv already generated in python_exploits.csv. For updates: delete it and retry')


def ruby_statistics():
    print('Executing ruby statistics...')
    #---------------RUBY DATASET STATISTICS----------------
    #Ruby snippets dataset
    df_rb = df_lang[df_lang['language']=='rb']
    #Ruby MSF percentage
    percentage_mfs_rb = (df_rb['description'].str.contains('metasploit|mfs', case=False).value_counts()/df_rb['description'].count())*100
    print('Percentage of mfs ruby snippets: ')
    print(percentage_mfs_rb)


download_repo()

start_time = time.time()
df_lang = edit_csv()
global_statistics()
df_wp = wordpress_statistics()
plot_percentage(df_lang, df_wp)
python_statistics()
ruby_statistics()
f.write('Statistics time: ' + str(time.time()-start_time) + ' seconds\n')

f.write('Total time: ' + str(time.time()-first_time) + ' seconds\n')
f.close()