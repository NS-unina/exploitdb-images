import docker
import os
import logging
from core.utils import filemanager

client = docker.from_env()

def build_image(local_folder):
    print('Building image...')
    tag = os.path.basename(local_folder)+':py'
    client.images.build(
    path = local_folder,
    tag=tag,
    dockerfile = 'Dockerfile'
    )
    return tag

def run_container(tag, timeout):
    print('Running container...')
    container = client.containers.run(image=tag, detach=True)
    try:
        if(timeout):
            result = container.wait(condition='not-running', timeout=30)['StatusCode']
        else:
            result = container.wait(condition='not-running')['StatusCode']
    except:
        logging.error("timeout ended")
        result = 124 #error code for 'timeout ended'
    run_logs = container.logs(stdout=True, stderr=True).decode().strip()
    #err_logs = container.logs(stderr=True).decode().strip()
    print(run_logs)
    container.remove(force=True)
    client.images.remove(image=tag, force=True)
    return result, run_logs

def test_exploit(local_folder, timeout=True):
    print('Testing exploit: ' + local_folder)
    run_logs = ""
    docker_file_path = os.path.join(local_folder, 'Dockerfile')
    if(filemanager.file_exists(docker_file_path)):
        try: 
            tag = build_image(local_folder)
            result, run_logs = run_container(tag, timeout)
        except:
            logging.error('Error building images')
            result = 4 #Error code for 'build image error'
    else:
        logging.error('Dockerfile not found')
        result = -1 #Error code for 'parsing error'
    print('Finished with exit code: '+str(result))
    return result, run_logs