package docker
import (
	"github.com/cybersecsi/exploitdb-images/core/utils"

	"context"
	"io"
	"os"
	"fmt"
	"github.com/docker/docker/api/types"
	"github.com/docker/docker/client"
)



func Init() (cli *client.Client) {
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	return 
}

func Images() {
	cli := Init()
	ctx := context.Background()
	images, err := cli.ImageList(ctx, types.ImageListOptions{})
	utils.ErrorHandler(err)

	for _, image := range images {
		fmt.Println(image.ID)
	}
}

func ImageExists(name string) bool {
	cli := Init()
	ctx := context.Background()
	// res, err := cli.ImageSearch(ctx, utils.ImageName(name), types.ImageSearchOptions{Limit: 1})
	// res, err := cli.ImageSearch(ctx, "bfac", types.ImageSearchOptions{Limit: 1})
	res, err := cli.ImageSearch(ctx, "secsi", types.ImageSearchOptions{Limit: 100})

	fmt.Println(res)
	utils.ErrorHandler(err)
	return len(res) > 0
}

func Pull(name string) {
	cli := Init()
	ctx := context.Background()
	out, err := cli.ImagePull(ctx, name, types.ImagePullOptions{})
	utils.ErrorHandler(err)
	defer out.Close()
	io.Copy(os.Stdout, out)


}