package docker

import (
	"github.com/cybersecsi/exploitdb-images/core/edb"
	"github.com/cybersecsi/exploitdb-images/core/lang"
	"github.com/cybersecsi/exploitdb-images/core/utils"
)

// Takes from template the base image and try to solve all errors
func GenerateDockerImage(exploit_path string) (is_failed bool) {
	remote_exploit_path := edb.GetExploitPath(exploit_path)
	utils.Log("Get exploit remote source code")
	CreateDockerfileStructure(exploit_path, "python", remote_exploit_path, false)
	utils.Log("Build Docker Image")
	imageName := BuildDockerImage(exploit_path, remote_exploit_path)
	utils.Log("Test exploit")
	is_failed, output := TestExploit(imageName)
	var err error
	// TODO: CHOOSE THE RIGHT LANG
	checker := lang.PythonChecker()
	for is_failed && err != lang.ErrNotImplemented {
		langErr, info, err_discover := checker.DiscoverError(output)
		err = err_discover
		switch langErr {
		case lang.MISSING_MODULE:
			utils.Log("Missing module", info, "try to add it in requirements.txt")
			checker.AddDependency(exploit_path, info)

		case lang.VERSION_LANGUAGE_ERROR:
			utils.Log("Not valid structure, change the python version")
			CreateDockerfileStructure(exploit_path, "python2", remote_exploit_path, true)
			checker = lang.Python2Checker()
		}
		utils.Log("Build Docker Image")
		imageName = BuildDockerImage(exploit_path, remote_exploit_path)
		utils.Log("Test exploit")
		is_failed, output = TestExploit(imageName)
		utils.Log(is_failed)
		utils.Log(output)

	}
	utils.ErrorHandler(err)
	return

}
