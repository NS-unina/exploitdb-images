package utils

import (
	"bytes"
	"encoding/csv"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"runtime"
	"strings"

	cp "github.com/otiai10/copy"
)

var (
	_, b, _, _   = runtime.Caller(0)
	basepath     = filepath.Dir(b)
	root         = filepath.Join(filepath.Dir(b), "../..")
	TemplatePath = filepath.Join(root, "assets", "templates")
	ImagePath    = filepath.Join(root, "images")
)

const ORGANIZATION = "secsi"

func Log(s ...interface{}) {
	fmt.Println("[+]", s)
}

func ImageName(path string) string {
	return fmt.Sprintf("%s/edb-%s", ORGANIZATION, FileNameWithoutExtension(filepath.Base(path)))
}

func ErrorHandler(err error) {
	if err != nil {
		panic(err)
	}
}

func HttpGet(url string) string {
	resp, err := http.Get(url)
	ErrorHandler(err)

	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		ErrorHandler(errors.New("Not 200 OK response"))
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	ErrorHandler(err)
	return string(bodyBytes)
}

func ReadRemoteCsv(url string) [][]string {
	resp, err := http.Get(url)
	ErrorHandler(err)
	reader := csv.NewReader(resp.Body)
	reader.Comma = ';'
	data, err := reader.ReadAll()
	ErrorHandler(err)
	return data
}

func ReadCsvFile(path string) [][]string {
	f, err := os.Open(path)
	ErrorHandler(err)
	defer f.Close()
	csvReader := csv.NewReader(f)
	records, err := csvReader.ReadAll()
	ErrorHandler(err)
	return records
}

func ReplaceLineInFile(path string, s string, replace string) {
	input, err := ioutil.ReadFile(path)
	ErrorHandler(err)
	output := bytes.Replace(input, []byte(s), []byte(replace), -1)
	err = ioutil.WriteFile(path, output, 0666)
	ErrorHandler(err)
}

func FileExists(path string) bool {
	if _, err := os.Stat(path); !os.IsNotExist(err) {
		return true
	} else {
		return false
	}
}

func CopyDir(src string, dest string) {
	err := cp.Copy(src, dest)
	ErrorHandler(err)

}

func CopyFile(src string, dest string) {
	input, err := ioutil.ReadFile(src)
	ErrorHandler(err)
	err = ioutil.WriteFile(dest, input, 0644)
	ErrorHandler(err)
}

func FileNameWithoutExtension(fileName string) string {
	return strings.TrimSuffix(fileName, filepath.Ext(fileName))
}

func SplitLines(s string) []string {
	return strings.Split(strings.ReplaceAll(s, "\r\n", "\n"), "\n")
}

func BetweenSingleQuotes(s string) string {
	first := strings.Index(s, "'")
	last := strings.LastIndex(s, "'")
	if first == -1 || last == -1 {
		ErrorHandler(errors.New("Missing quotes"))
	}
	return s[first+1 : last]
}

// Add a new line to existing string file
func AddNewStringToFile(file_path string, s string) {
	f, err := os.OpenFile(file_path, os.O_APPEND|os.O_WRONLY, 0644)
	ErrorHandler(err)
	_, err = f.Write([]byte(fmt.Sprintf("%s\n", s)))
	ErrorHandler(err)
	defer f.Close()
}

// For a given exploit full path, returns the image path (replace the extension)
func ImageDestPath(path string) string {
	path_folder := filepath.Dir(path)
	file_name := filepath.Base(path)
	dest_path := filepath.Join(ImagePath, path_folder, FileNameWithoutExtension(file_name))
	return dest_path
}

// Return last string from space
func LastString(s string) string {
	lastSpace := strings.LastIndex(s, " ")
	return s[lastSpace+1:]
}
