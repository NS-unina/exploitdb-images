package utils

import (
	"encoding/csv"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

const ORGANIZATION = "secsi"

func Log(s ...interface{}) {
	fmt.Println("[+]", s)
}

func ImageName(name string) string {
	in := fmt.Sprintf("%s/%s", ORGANIZATION, name)
	return in
}

func ErrorHandler(err error) {
	if err != nil {
		panic(err)
	}
}

func HttpGet(url string) string {
	resp, err := http.Get(url)
	ErrorHandler(err)

	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		ErrorHandler(errors.New("Not 200 OK response"))
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	ErrorHandler(err)
	return string(bodyBytes)
}

func ReadRemoteCsv(url string) [][]string {
	resp, err := http.Get(url)
	ErrorHandler(err)
	reader := csv.NewReader(resp.Body)
	reader.Comma = ';'
	data, err := reader.ReadAll()
	ErrorHandler(err)
	return data
}

func ReadCsvFile(path string) [][]string {
	f, err := os.Open(path)
	ErrorHandler(err)
	defer f.Close()
	csvReader := csv.NewReader(f)
	records, err := csvReader.ReadAll()
	ErrorHandler(err)
	return records
}

func CopyFile(src string, dest string) {
	input, err := ioutil.ReadFile(src)
	ErrorHandler(err)
	err = ioutil.WriteFile(dest, input, 0644)
	ErrorHandler(err)
}

func FileNameWithoutExtension(fileName string) string {
	return strings.TrimSuffix(fileName, filepath.Ext(fileName))
}
